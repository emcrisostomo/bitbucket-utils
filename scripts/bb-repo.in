#!@ZSH_CMD@
# -*- coding: utf-8; tab-width: 2; indent-tabs-mode: nil; sh-basic-offset: 2; sh-indentation: 2; -*- vim:fenc=utf-8:et:sw=2:ts=2:sts=2
#
# Copyright (C) 2015 Enrico M. Crisostomo
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3, or (at your option)
# any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
setopt local_options
setopt local_traps
unsetopt glob_subst

set -o errexit
set -o nounset

PROGNAME=${0:t}
PROGDIR=${0:h}
DATA_DIR=~/.bb.d
TS_FILE=timestamp
JQ=@JQ_CMD@
CURL=@CURL_CMD@
PROGRAMS=( ${JQ} ${CURL} )
REPO_COMMAND=

typeset -i ARGS_PROCESSED=0
typeset -a REPOSITORIES
typeset -a REPO_NAMES
typeset -a REPO_URLS
typeset -a PAGES
typeset -a BB_CURL_USER
BB_CURL_USER=()

check_health()
{
  for p in ${PROGRAMS}
  do
    command -v ${p} > /dev/null 2>&1 || {
      >&2 print -- Cannot find: ${p}
      exit 1
    }
  done
}

check_repository_vars()
{
  (( ${+REPO_OWNER} )) || {
    >&2 print -- Missing repository owner.
    exit 4
  }
}

print_usage()
{
  print -- "${PROGNAME} @PACKAGE_VERSION@"
  print
  print -- "Usage:"
  print -- "${PROGNAME} repo (command) (option)*"
  print
  print -- "Commands:"
  print --
  print -- "  help    Show help."
  print -- "  list    List repositories."
  print -- "  update  Update indexes."
  print --
  print -- "Options:"
  print -- "  -h    Show this help."
  print -- "  -n    Specify a repository name pattern."
  print -- "  -o    Specify the repository owner."
  print -- "  -s    Specify the URL scheme."
  print -- "  -t    Specify the repository type."
  print -- "  -u    Print repository URLs."
  print
  print -- "Report bugs to <enrico.m.crisostomo@gmail.com>."
}

get_curr_time()
{
  date +%s
}

read_timestamp()
{
  cat $1/${TS_FILE}
}

# $1: Path where the API call is cached.
should_update_data()
{
  if [[ ! -f $1/${TS_FILE} ]]
  then
    print 1
    return
  fi

  local LATEST_TS=$(read_timestamp $1)

  if (( $(( $(date +%s) - ${LATEST_TS} )) > $((60*60*24)) ))
  then
    print 1
  else
    print 0
  fi
}

# $1: API request URL.
get_data_path()
{
  # User data is stored into
  #
  #   ~/${DATA_DIR}/${USER_FRAGMENT}/base64-encoded-url
  #
  # If an anonymous API call is performed, USER_FRAGMENT is set to ".".
  local USER_FRAGMENT=.
  [[ ! -z ${BITBUCKET_USER} ]] && USER_FRAGMENT=${BITBUCKET_USER}
  local REQ_FOLDER=${DATA_DIR}/${USER_FRAGMENT}/$(echo $1 | base64)

  print -- ${REQ_FOLDER}
}

# $1: API request URL
load_data()
{
  local REQ_FOLDER=$(get_data_path $1)

  if (( $(should_update_data ${REQ_FOLDER}) > 0 ))
  then
    update_data $1 ${REQ_FOLDER}
  fi

  load_data_from_files ${REQ_FOLDER}
}

ensure_data_dir()
{
    mkdir -p ${DATA_DIR}
}

# $1: Path where the API call is cached.
update_timestamp()
{
  ensure_data_dir
  print $(get_curr_time) > $1/${TS_FILE}
}

# $1: API request URL.
# $2: Path where the API call is cached.
update_data()
{
  local NEXT_PAGE=$1
  PAGES=()
  remove_old_data_files $2

  while [[ ! -z ${NEXT_PAGE} ]]
  do
    RESPONSE=$(${CURL_CMD} ${NEXT_PAGE}) || {
      >&2 print -- The server returned an error.
      exit 2
    }

    PAGES=(${RESPONSE} ${PAGES})
    NEXT_PAGE=$(echo ${RESPONSE} | ${JQ} -r '.next')
    [[ ${NEXT_PAGE} == "null" ]] && NEXT_PAGE=""
  done

  # Since PAGES is an array, we are passing the variable name instead of the
  # variable value.
  save_data $2 PAGES
  update_timestamp $2
}

# $1: Path where the API call is cached.
load_data_from_files()
{
  local REQ_FOLDER=$1
  PAGES=()

  for i in ${REQ_FOLDER}/*
  do
    [[ -f ${i} ]] || {
      >&2 print -- ${i}: unexpected file type.  Skipping
      continue
    }

    [[ ${i:t} == ${TS_FILE} ]] && continue

    PAGES=(${PAGES} "$(cat ${i})")
  done
}

# $1: Path where the API call is cached.
remove_old_data_files()
{
  rm -rf $1
}

# $1: Path where the API call is cached.
save_data()
{
  local REQ_FOLDER=$1
  local -i RES_NUM
  local -a RESPONSES

  RES_NUM=0
  RESPONSES=(${(P)${2}})

  mkdir -p ${REQ_FOLDER}

  for res in ${RESPONSES}
  do
    echo ${res} > ${REQ_FOLDER}/${RES_NUM}
    RES_NUM=$((RES_NUM+1))
  done
}

print_names()
{
  local REPO_TYPE_FILTER

  if [[ ! -z ${REPO_TYPE} ]]
  then
    REPO_TYPE_FILTER="select(.scm==\"${REPO_TYPE}\") |"
  fi

  for res in ${PAGES}
  do
    REPO_NAMES=( ${REPO_NAMES} \
                   $(echo ${res} | \
                        ${JQ} -r ".values[] | ${REPO_TYPE_FILTER} .name") )
  done

  local -i repo_count
  repo_count=0

  if (( ${#REPO_NAMES} == 0 ))
  then
    return 0
  fi

  for n in ${REPO_NAMES}
  do
    if [[ ${n} =~ ${REPO_PATTERN} ]]
    then
      print -- ${n}
      (( repo_count = repo_count + 1 ))
    fi
  done

  if (( repo_count > 0 ))
  then
    return 0
  else
    return 1;
  fi
}

print_urls()
{
  for res in ${PAGES}
  do
    REPO_URLS=( ${REPO_URLS} \
                  $(echo ${res} | \
                       ${JQ} -r ".values[].links.clone[] | select(.name==\"${URL_SCHEME}\") | .href") )
  done

  local -i repo_count
  repo_count=0

  if (( ${#REPO_URLS} == 0 ))
  then
    return 0
  fi

  for n in ${REPO_URLS}
  do
    if [[ ${n} =~ ${REPO_PATTERN} ]]
    then
      print -- ${n}
      (( repo_count = repo_count + 1 ))
    fi
  done

  if (( repo_count > 0 ))
  then
    return 0
  else
    return 1;
  fi
}

parse_opts()
{
  while getopts ":hn:o:s:t:u" opt
  do
    case $opt in
      h)
        print_usage
        exit 0
        ;;
      n)
        REPO_PATTERN=${OPTARG}
        ;;
      o)
        REPO_OWNER=${OPTARG}
        ;;
      s)
        URL_SCHEME=${OPTARG}
        ;;
      t)
        REPO_TYPE=${OPTARG}
        ;;
      u)
        ATTRIBUTE=url
        ;;
      \?)
        >&2 print -- Invalid option -${OPTARG}.
        exit 1
        ;;
      :)
        >&2 print -- Missing argument to -${OPTARG}.
        exit 1
        ;;
    esac
  done

  ARGS_PROCESSED=$((OPTIND - 1))
}

parse_cmd()
{
  (( $# > 0 )) || {
    >&2 print -- Missing command.  Try help.
    exit 2
  }

  case $1 in
    help) ;&
    list) ;&
    update)
      ;;
    *)
      >&2 print -- $1: Unknown command.
      exit 2
      ;;
  esac

  REPO_COMMAND=$1
  ARGS_PROCESSED=1
}

help()
{
  print_usage
}

list()
{
  load_data ${GETREPO}

  case ${ATTRIBUTE} in
    name)
      print_names
      ;;
    url)
      print_urls
      ;;
    *)
      >&2 print -- Unexpected state.
      exit 3
      ;;
  esac
}

update()
{
  update_data ${GETREPO} $(get_data_path ${GETREPO})
  exit 2
}

run_command()
{
  eval ${REPO_COMMAND}
}

# Main routine
check_health

parse_cmd  $* && shift ${ARGS_PROCESSED}
parse_opts $* && shift ${ARGS_PROCESSED}

(( $# == 0 )) || {
  >&2 print -- Unexpected parameter: $*
  exit 1
}

# Set default variable values.
#
# Since other options and commands depend on the value of BITBUCKET_USER, we set
# it to an empty value if it not yet set.
: ${BITBUCKET_USER=}
: ${REPO_OWNER=${BITBUCKET_USER}}
: ${REPO_PATTERN=.*}
: ${REPO_TYPE=}
: ${URL_SCHEME=https}
: ${ATTRIBUTE=name}

[[ ! -z ${BITBUCKET_USER} ]] && {
   BB_CURL_USER=(--user ${BITBUCKET_USER}:${BITBUCKET_PASS})
}

check_repository_vars

CURL_CMD=(${CURL} -s -f ${BB_CURL_USER})
GETREPO=https://bitbucket.org/api/2.0/repositories/${REPO_OWNER}

run_command
