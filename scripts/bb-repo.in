#!@ZSH_CMD@
# -*- coding: utf-8; tab-width: 2; indent-tabs-mode: nil; sh-basic-offset: 2; sh-indentation: 2; -*- vim:fenc=utf-8:et:sw=2:ts=2:sts=2
#
# Copyright (C) 2015 Enrico M. Crisostomo
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3, or (at your option)
# any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
setopt local_options
setopt local_traps
unsetopt glob_subst

set -o errexit
set -o nounset

PROGNAME=${0:t}
PROGDIR=${0:h}
DATA_DIR=~/.bb.d
TS_FILE=${DATA_DIR}/timestamp
CONFIG_FILE=~/.bb.conf
JQ=@JQ_CMD@
CURL=@CURL_CMD@
PROGRAMS=( ${JQ} ${CURL} )

typeset -a REPOSITORIES
typeset -a REPO_NAMES
typeset -a REPO_URLS
typeset -a PAGES
typeset REPO_COMMAND

check_health()
{
  for p in ${PROGRAMS}
  do
    command -v ${p} > /dev/null 2>&1 || {
      >&2 print -- Cannot find: ${p}
      exit 1
    }
  done
}

check_credentials()
{
  (( ${+BITBUCKET_USER} )) || {
    >&2 print -- Missing credentials.
    exit 4
  }

  (( ${+BITBUCKET_PASS} )) || {
    >&2 print -- Missing credentials.
    exit 4
  }
}

check_repository_vars()
{
  (( ${+REPO_OWNER} )) || {
    >&2 print -- Missing repository owner.
    exit 4
  }
}

print_usage()
{
  print -- "${PROGNAME} @PACKAGE_VERSION@"
  print
  print -- "Usage:"
  print -- "${PROGNAME} repo (command) (option)*"
  print
  print -- "Commands:"
  print --
  print -- "  help    Show help."
  print -- "  list    List repositories."
  print -- "  update  Update indexes."
  print --
  print -- "Options:"
  print -- "  -h    Show this help."
  print -- "  -n    Specify a repository name pattern."
  print -- "  -o    Specify the repository owner."
  print -- "  -s    Specify the URL scheme."
  print -- "  -u    Print repository URLs."
  print
  print -- "Report bugs to <enrico.m.crisostomo@gmail.com>."
}

get_curr_time()
{
  date +%s
}

read_timestamp()
{
  cat ${TS_FILE}
}

should_update_data()
{
  if [[ ! -f ${TS_FILE} ]]
  then
    print 1
    return
  fi

  LATEST_TS=$(read_timestamp)

  if (( $(( $(date +%s) - ${LATEST_TS} )) > $((60*60*24)) ))
  then
    print 1
  else
    print 0
  fi
}

load_data()
{
  if (( $(should_update_data) > 0 ))
  then
    update_data $1
  fi

  load_data_from_files $1
}

ensure_data_dir()
{
    mkdir -p ${DATA_DIR}
}

update_timestamp()
{
  ensure_data_dir
  print $(get_curr_time) > ${TS_FILE}
}

update_data()
{
  local NEXT_PAGE=$1

  remove_old_data_files $1

  while [[ ! -z ${NEXT_PAGE} ]]
  do
    RESPONSE=$(${CURL_CMD} ${NEXT_PAGE}) || {
      >&2 print -- The server returned an error.
      exit 2
    }

    PAGES=(${RESPONSE} ${PAGES})
    NEXT_PAGE=$(echo ${RESPONSE} | ${JQ} -r '.next')
    [[ ${NEXT_PAGE} == "null" ]] && NEXT_PAGE=""
  done

  # Since PAGES is an array, we are passing the variable name instead of the
  # variable value.
  save_data $1 PAGES
  update_timestamp
}

load_data_from_files()
{
  local REQ_FOLDER=${DATA_DIR}/$(echo $1 | base64)
  PAGES=()

  for i in ${REQ_FOLDER}/*
  do
    [[ -f ${i} ]] || {
      >&2 print -- ${i}: unexpected file type.  Skipping
      continue
    }

    PAGES=(${PAGES} "$(cat ${i})")
  done
}

remove_old_data_files()
{
  local REQ_FOLDER=${DATA_DIR}/$(echo $1 | base64)

  rm -rf ${REQ_FOLDER}
}

save_data()
{
  local REQ_FOLDER=${DATA_DIR}/$(echo $1 | base64)
  local -i RES_NUM
  local -a RESPONSES

  RES_NUM=0
  RESPONSES=(${(P)${2}})

  mkdir -p ${REQ_FOLDER}

  for res in ${RESPONSES}
  do
    echo ${res} > ${REQ_FOLDER}/${RES_NUM}
    RES_NUM=$((RES_NUM+1))
  done
}

print_names()
{
  local REPO_TYPE_FILTER

  if [[ ! -z ${REPO_TYPE} ]]
  then
    REPO_TYPE_FILTER="select(.scm==\"${REPO_TYPE}\") |"
  fi

  for res in ${PAGES}
  do
    REPO_NAMES=( ${REPO_NAMES} \
                   $(echo ${res} | \
                        ${JQ} -r ".values[] | ${REPO_TYPE_FILTER} .name") )
  done

  local -i repo_count
  repo_count=0

  if (( ${#REPO_NAMES} == 0 ))
  then
    return 0
  fi

  for n in ${REPO_NAMES}
  do
    if [[ ${n} =~ ${REPO_PATTERN} ]]
    then
      print -- ${n}
      (( repo_count = repo_count + 1 ))
    fi
  done

  if (( repo_count > 0 ))
  then
    return 0
  else
    return 1;
  fi
}

print_urls()
{
  for res in ${PAGES}
  do
    REPO_URLS=( ${REPO_URLS} \
                  $(echo ${res} | \
                       ${JQ} -r ".values[].links.clone[] | select(.name==\"${URL_SCHEME}\") | .href") )
  done

  local -i repo_count
  repo_count=0

  if (( ${#REPO_URLS} == 0 ))
  then
    return 0
  fi

  for n in ${REPO_URLS}
  do
    if [[ ${n} =~ ${REPO_PATTERN} ]]
    then
      print -- ${n}
      (( repo_count = repo_count + 1 ))
    fi
  done

  if (( repo_count > 0 ))
  then
    return 0
  else
    return 1;
  fi
}

parse_opts()
{
  while getopts ":hn:o:s:t:u" opt
  do
    case $opt in
      h)
        print_usage
        exit 0
        ;;
      n)
        REPO_PATTERN=${OPTARG}
        ;;
      o)
        REPO_OWNER=${OPTARG}
        ;;
      s)
        URL_SCHEME=${OPTARG}
        ;;
      t)
        REPO_TYPE=${OPTARG}
        ;;
      u)
        ATTRIBUTE=url
        ;;
      \?)
        >&2 print -- Invalid option -${OPTARG}.
        exit 1
        ;;
      :)
        >&2 print -- Missing argument to -${OPTARG}.
        exit 1
        ;;
    esac
  done

  shift $((OPTIND-1))
}

parse_cmd()
{
  (( $# > 0 )) || {
    >&2 print -- Missing command.  Try help.
    exit 2
  }

  case $1 in
    help) ;&
    list) ;&
    update)
      ;;
    *)
      >&2 print -- $1: Unknown command.
      exit 2
      ;;
  esac

  REPO_COMMAND=$1
}

help()
{
  print_usage
}

list()
{
  load_data ${GETREPO}

  case ${ATTRIBUTE} in
    name)
      print_names
      ;;
    url)
      print_urls
      ;;
    *)
      >&2 print -- Unexpected state.
      exit 3
      ;;
  esac
}

update()
{
  update_data ${GETREPO}
  exit 2
}

run_command()
{
  eval ${REPO_COMMAND}
}

# Main routine
check_health

if [[ -f ${CONFIG_FILE} ]]
then
  . ${CONFIG_FILE}
fi

parse_cmd $*
shift 1
parse_opts $*

check_credentials
check_repository_vars

: ${REPO_PATTERN=.*}
: ${REPO_TYPE=}
: ${URL_SCHEME=https}
: ${ATTRIBUTE=name}

CURL_CMD=(${CURL} -s -f --user ${BITBUCKET_USER}:${BITBUCKET_PASS})
GETREPO=https://bitbucket.org/api/2.0/repositories/${REPO_OWNER}

run_command
